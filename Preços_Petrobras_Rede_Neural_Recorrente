#ações da Petrobras PETR4.SA2.csv
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, SimpleRNN
import pandas as pd, numpy as np, tensorflow as tf, matplotlib.pyplot as plt

dados=pd.read_csv('/content/PETR4.SA2.csv')
dados.head()
precos=dados['Close']
precos
days_time_step=15
training_size=int(len(precos)*0.95)
test_size=len(precos) - training_size
train_data, input_data=np.array(precos[0:training_size]), np.array(precos[training_size-days_time_step:])
test_data=np.array(precos[training_size:])
print(train_data.shape, input_data.shape, test_data.shape)
scaler=MinMaxScaler(feature_range=(0,1))
train_data_norm=scaler.fit_transform(np.array(train_data).reshape(-1,1))
test_data_norm=scaler.transform(np.array(input_data).reshape(-1,1))
val_data_norm=scaler.transform(np.array(test_data).reshape(-1,1))
print(train_data_norm.shape, test_data_norm.shape, val_data_norm.shape)
X_train, y_train, X_test, X_val, y_val= [], [], [], [], []
for i in range(days_time_step, len(train_data)):
    X_train.append(train_data_norm[i-days_time_step:i])
    y_train.append(train_data_norm[i])

for i in range(days_time_step, days_time_step + len(test_data)):
    X_test.append(test_data_norm[i-days_time_step:i])

for i in range(days_time_step, len(test_data)):
    X_val.append(val_data_norm[i-days_time_step:i])
    y_val.append(val_data_norm[i])

X_train = np.array(X_train)
y_train = np.array(y_train)
X_test = np.array(X_test)
X_val = np.array(X_val)
y_val = np.array(y_val)

X_test.shape

model=Sequential()
model.add(LSTM(units=100, activation='tanh', input_shape=(days_time_step, 1)))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')
model.summary()

model.fit(X_train, y_train, epochs=30, batch_size=32, validation_data=(X_val, y_val))

predict=model.predict(X_test)
predict=scaler.inverse_transform(predict)
real=test_data
predict.shape

plt.figure(figsize = (18,9))
plt.plot(real, color = 'green', label = 'real')
plt.plot(predict, color = 'red', label = 'previsão')
plt.xticks(range(0, len(real), 50), dados['Date'].iloc[- len(real)::50], rotation=45)
plt.xlabel('Datas', fontsize=18)
plt.ylabel('Preço Médio', fontsize=18)
plt.title("Projeção de Preço PETR4", fontsize=30)
plt.legend()
plt.show()
